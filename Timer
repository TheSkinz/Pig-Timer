```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Custom Stopwatch</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <div class="container">
        <div class="controls">
            <button id="brStart">B-R Start</button>
            <button id="rbStart">R-B Start</button>
            <button id="pause">Pause</button>
            <button id="clear">Clear</button>
        </div>
        <div class="settings">
            <label for="numLines">Number of lines:</label>
            <select id="numLines"></select>
            <label for="totalLength">Total length (Ft.):</label>
            <input type="number" id="totalLength" min="0" step="0.1">
        </div>
        <canvas id="progressBar" width="600" height="400"></canvas>
        <div id="distanceDisplay">Distance: 0.00 ft</div>
    </div>
    <script src="script.js"></script>
</body>
</html>
```

CSS (styles.css):
```css
body {
    font-family: Arial, sans-serif;
}
.container {
    max-width: 800px;
    margin: 0 auto;
    padding: 20px;
}
.controls, .settings {
    margin-bottom: 20px;
}
button {
    padding: 10px;
    margin-right: 10px;
}
#brStart { background-color: blue; color: white; }
#rbStart { background-color: red; color: white; }
canvas {
    border: 1px solid #ccc;
}
```

JavaScript (script.js):
```javascript
class Stopwatch {
    constructor() {
        this.isRunning = false;
        this.direction = 1;
        this.currentDistance = 0;
        this.totalLength = 0;
        this.numLines = 0;
        this.canvas = document.getElementById('progressBar');
        this.ctx = this.canvas.getContext('2d');
        
        this.initializeControls();
    }

    initializeControls() {
        document.getElementById('brStart').addEventListener('click', () => this.start(1));
        document.getElementById('rbStart').addEventListener('click', () => this.start(-1));
        document.getElementById('pause').addEventListener('click', () => this.pause());
        document.getElementById('clear').addEventListener('click', () => this.clear());

        const numLinesSelect = document.getElementById('numLines');
        for (let i = 0; i <= 60; i++) {
            const option = document.createElement('option');
            option.value = i;
            option.textContent = i;
            numLinesSelect.appendChild(option);
        }

        numLinesSelect.addEventListener('change', () => this.updateProgressBar());
        document.getElementById('totalLength').addEventListener('input', () => this.updateProgressBar());
    }

    start(direction) {
        this.direction = direction;
        if (!this.isRunning) {
            this.isRunning = true;
            this.totalLength = parseFloat(document.getElementById('totalLength').value);
            this.numLines = parseInt(document.getElementById('numLines').value);
            this.update();
        }
    }

    pause() {
        this.isRunning = false;
    }

    clear() {
        this.isRunning = false;
        this.currentDistance = 0;
        this.updateProgressBar();
        this.updateDistanceDisplay();
    }

    update() {
        if (this.isRunning) {
            this.currentDistance += this.direction * 3; // 3 ft per second
            if (0 <= this.currentDistance && this.currentDistance <= this.totalLength) {
                this.updateProgressBar();
                this.updateDistanceDisplay();
                setTimeout(() => this.update(), 1000); // Update every second
            } else {
                this.isRunning = false;
            }
        }
    }

    updateProgressBar() {
        // Clear canvas
        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
        
        // Draw lines
        const lineSpacing = this.canvas.height / (this.numLines + 1);
        for (let i = 0; i < this.numLines; i++) {
            this.ctx.beginPath();
            this.ctx.moveTo(0, (i + 1) * lineSpacing);
            this.ctx.lineTo(this.canvas.width, (i + 1) * lineSpacing);
            this.ctx.stroke();
        }

        // Draw circular indicator
        const progress = this.currentDistance / this.totalLength;
        const x = progress * this.canvas.width;
        const y = (Math.floor(progress * this.numLines) + 1) * lineSpacing;
        
        this.ctx.beginPath();
        this.ctx.arc(x, y, 10, 0, 2 * Math.PI);
        this.ctx.fillStyle = 'red';
        this.ctx.fill();
    }

    updateDistanceDisplay() {
        document.getElementById('distanceDisplay').textContent = `Distance: ${this.currentDistance.toFixed(2)} ft`;
    }
}

const stopwatch = new Stopwatch();
```
